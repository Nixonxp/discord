// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/chat/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// MessagesStorage is an autogenerated mock type for the MessagesStorage type
type MessagesStorage struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: ctx, message
func (_m *MessagesStorage) CreateMessage(ctx context.Context, message *models.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessages provides a mock function with given fields: ctx, chatId
func (_m *MessagesStorage) GetMessages(ctx context.Context, chatId models.ChatID) ([]*models.Message, error) {
	ret := _m.Called(ctx, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []*models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatID) ([]*models.Message, error)); ok {
		return rf(ctx, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatID) []*models.Message); ok {
		r0 = rf(ctx, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ChatID) error); ok {
		r1 = rf(ctx, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessagesStorage creates a new instance of MessagesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagesStorage {
	mock := &MessagesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
