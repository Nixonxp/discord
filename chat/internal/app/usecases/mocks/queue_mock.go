// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/chat/internal/app/models"
	mock "github.com/stretchr/testify/mock"

	usecases "github.com/Nixonxp/discord/chat/internal/app/usecases"
)

// QueueInterface is an autogenerated mock type for the QueueInterface type
type QueueInterface struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: ctx, message
func (_m *QueueInterface) CreateMessage(ctx context.Context, message usecases.MessageDto) (*models.ActionInfo, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 *models.ActionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.MessageDto) (*models.ActionInfo, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.MessageDto) *models.ActionInfo); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ActionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.MessageDto) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueueInterface creates a new instance of QueueInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueInterface {
	mock := &QueueInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
