// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/chat/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// ChatStorage is an autogenerated mock type for the ChatStorage type
type ChatStorage struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: ctx, chat
func (_m *ChatStorage) CreateChat(ctx context.Context, chat *models.Chat) error {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChatById provides a mock function with given fields: ctx, chatId
func (_m *ChatStorage) GetChatById(ctx context.Context, chatId models.ChatID) (*models.Chat, error) {
	ret := _m.Called(ctx, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatById")
	}

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatID) (*models.Chat, error)); ok {
		return rf(ctx, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ChatID) *models.Chat); ok {
		r0 = rf(ctx, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ChatID) error); ok {
		r1 = rf(ctx, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatByMetadataAndType provides a mock function with given fields: ctx, metadata, chatType
func (_m *ChatStorage) GetChatByMetadataAndType(ctx context.Context, metadata string, chatType string) (*models.Chat, error) {
	ret := _m.Called(ctx, metadata, chatType)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByMetadataAndType")
	}

	var r0 *models.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Chat, error)); ok {
		return rf(ctx, metadata, chatType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Chat); ok {
		r0 = rf(ctx, metadata, chatType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, metadata, chatType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatStorage creates a new instance of ChatStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatStorage {
	mock := &ChatStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
