// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/channel/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// ChannelStorage is an autogenerated mock type for the ChannelStorage type
type ChannelStorage struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields: ctx, channel
func (_m *ChannelStorage) CreateChannel(ctx context.Context, channel models.Channel) error {
	ret := _m.Called(ctx, channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Channel) error); ok {
		r0 = rf(ctx, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChannel provides a mock function with given fields: ctx, channelId
func (_m *ChannelStorage) DeleteChannel(ctx context.Context, channelId models.ChannelID) error {
	ret := _m.Called(ctx, channelId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChannelID) error); ok {
		r0 = rf(ctx, channelId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannelById provides a mock function with given fields: ctx, id
func (_m *ChannelStorage) GetChannelById(ctx context.Context, id models.ChannelID) (*models.Channel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelById")
	}

	var r0 *models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChannelID) (*models.Channel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ChannelID) *models.Channel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ChannelID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChannelStorage creates a new instance of ChannelStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChannelStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChannelStorage {
	mock := &ChannelStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
