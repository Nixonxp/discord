// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/channel/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// SubscribeStorage is an autogenerated mock type for the SubscribeStorage type
type SubscribeStorage struct {
	mock.Mock
}

// CreateSubscribe provides a mock function with given fields: ctx, subscribe
func (_m *SubscribeStorage) CreateSubscribe(ctx context.Context, subscribe models.SubscribeInfo) error {
	ret := _m.Called(ctx, subscribe)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SubscribeInfo) error); ok {
		r0 = rf(ctx, subscribe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscribe provides a mock function with given fields: ctx, channelId, userId
func (_m *SubscribeStorage) DeleteSubscribe(ctx context.Context, channelId models.ChannelID, userId models.UserID) error {
	ret := _m.Called(ctx, channelId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ChannelID, models.UserID) error); ok {
		r0 = rf(ctx, channelId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscribeStorage creates a new instance of SubscribeStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscribeStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscribeStorage {
	mock := &SubscribeStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
