// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/user/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// UserFriendsStorage is an autogenerated mock type for the UserFriendsStorage type
type UserFriendsStorage struct {
	mock.Mock
}

// AddToFriend provides a mock function with given fields: ctx, friendInfo
func (_m *UserFriendsStorage) AddToFriend(ctx context.Context, friendInfo []*models.UserFriends) error {
	ret := _m.Called(ctx, friendInfo)

	if len(ret) == 0 {
		panic("no return value specified for AddToFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.UserFriends) error); ok {
		r0 = rf(ctx, friendInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFriend provides a mock function with given fields: ctx, userId, friendId
func (_m *UserFriendsStorage) DeleteFriend(ctx context.Context, userId models.UserID, friendId models.UserID) error {
	ret := _m.Called(ctx, userId, friendId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, models.UserID) error); ok {
		r0 = rf(ctx, userId, friendId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserFriendsByUserId provides a mock function with given fields: ctx, userId
func (_m *UserFriendsStorage) GetUserFriendsByUserId(ctx context.Context, userId models.UserID) ([]*models.Friend, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFriendsByUserId")
	}

	var r0 []*models.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) ([]*models.Friend, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) []*models.Friend); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserFriendsStorage creates a new instance of UserFriendsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserFriendsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserFriendsStorage {
	mock := &UserFriendsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
