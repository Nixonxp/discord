// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/user/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// FriendInvitesStorage is an autogenerated mock type for the FriendInvitesStorage type
type FriendInvitesStorage struct {
	mock.Mock
}

// AcceptInvite provides a mock function with given fields: ctx, inviteId
func (_m *FriendInvitesStorage) AcceptInvite(ctx context.Context, inviteId models.InviteId) error {
	ret := _m.Called(ctx, inviteId)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.InviteId) error); ok {
		r0 = rf(ctx, inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvite provides a mock function with given fields: ctx, invite
func (_m *FriendInvitesStorage) CreateInvite(ctx context.Context, invite *models.FriendInvite) error {
	ret := _m.Called(ctx, invite)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.FriendInvite) error); ok {
		r0 = rf(ctx, invite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeclineInvite provides a mock function with given fields: ctx, inviteId
func (_m *FriendInvitesStorage) DeclineInvite(ctx context.Context, inviteId models.InviteId) error {
	ret := _m.Called(ctx, inviteId)

	if len(ret) == 0 {
		panic("no return value specified for DeclineInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.InviteId) error); ok {
		r0 = rf(ctx, inviteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInviteById provides a mock function with given fields: ctx, inviteId
func (_m *FriendInvitesStorage) GetInviteById(ctx context.Context, inviteId models.InviteId) (*models.FriendInvite, error) {
	ret := _m.Called(ctx, inviteId)

	if len(ret) == 0 {
		panic("no return value specified for GetInviteById")
	}

	var r0 *models.FriendInvite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.InviteId) (*models.FriendInvite, error)); ok {
		return rf(ctx, inviteId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.InviteId) *models.FriendInvite); ok {
		r0 = rf(ctx, inviteId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FriendInvite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.InviteId) error); ok {
		r1 = rf(ctx, inviteId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitesByUserId provides a mock function with given fields: ctx, userId
func (_m *FriendInvitesStorage) GetInvitesByUserId(ctx context.Context, userId models.UserID) (*models.UserInvitesInfo, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitesByUserId")
	}

	var r0 *models.UserInvitesInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (*models.UserInvitesInfo, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) *models.UserInvitesInfo); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInvitesInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFriendInvitesStorage creates a new instance of FriendInvitesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendInvitesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendInvitesStorage {
	mock := &FriendInvitesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
