// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/v1/service.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayService_Register_FullMethodName               = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/Register"
	GatewayService_Login_FullMethodName                  = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/Login"
	GatewayService_Refresh_FullMethodName                = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/Refresh"
	GatewayService_OauthLogin_FullMethodName             = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/OauthLogin"
	GatewayService_OauthLoginCallback_FullMethodName     = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/OauthLoginCallback"
	GatewayService_UpdateUser_FullMethodName             = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/UpdateUser"
	GatewayService_GetUserByLogin_FullMethodName         = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/GetUserByLogin"
	GatewayService_GetUserFriends_FullMethodName         = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/GetUserFriends"
	GatewayService_GetUserInvites_FullMethodName         = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/GetUserInvites"
	GatewayService_AddToFriendByUserId_FullMethodName    = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/AddToFriendByUserId"
	GatewayService_AcceptFriendInvite_FullMethodName     = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/AcceptFriendInvite"
	GatewayService_DeleteFromFriend_FullMethodName       = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/DeleteFromFriend"
	GatewayService_DeclineFriendInvite_FullMethodName    = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/DeclineFriendInvite"
	GatewayService_CreateServer_FullMethodName           = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/CreateServer"
	GatewayService_SearchServer_FullMethodName           = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/SearchServer"
	GatewayService_SubscribeServer_FullMethodName        = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/SubscribeServer"
	GatewayService_UnsubscribeServer_FullMethodName      = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/UnsubscribeServer"
	GatewayService_SearchServerByUserId_FullMethodName   = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/SearchServerByUserId"
	GatewayService_InviteUserToServer_FullMethodName     = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/InviteUserToServer"
	GatewayService_PublishMessageOnServer_FullMethodName = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/PublishMessageOnServer"
	GatewayService_GetMessagesFromServer_FullMethodName  = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/GetMessagesFromServer"
	GatewayService_AddChannel_FullMethodName             = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/AddChannel"
	GatewayService_DeleteChannel_FullMethodName          = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/DeleteChannel"
	GatewayService_JoinChannel_FullMethodName            = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/JoinChannel"
	GatewayService_LeaveChannel_FullMethodName           = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/LeaveChannel"
	GatewayService_SendUserPrivateMessage_FullMethodName = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/SendUserPrivateMessage"
	GatewayService_CreatePrivateChat_FullMethodName      = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/CreatePrivateChat"
	GatewayService_GetUserPrivateMessages_FullMethodName = "/github.com.Nixonxp.discord.gateway.api.v1.GatewayService/GetUserPrivateMessages"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// Регистрация пользователя
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Аутентификация пользователя
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Обновление токена пользователя
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Аутентификация пользователя через OAuth
	OauthLogin(ctx context.Context, in *OauthLoginRequest, opts ...grpc.CallOption) (*OauthLoginResponse, error)
	// Аутентификация пользователя через код oauth
	OauthLoginCallback(ctx context.Context, in *OauthLoginCallbackRequest, opts ...grpc.CallOption) (*OauthLoginCallbackResponse, error)
	// Обновление пользователя
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	// Поиск пользователя по логину
	GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	// Получить список друзей пользователя
	GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error)
	// Получить список заявок в друзья пользователя
	GetUserInvites(ctx context.Context, in *GetUserInvitesRequest, opts ...grpc.CallOption) (*GetUserInvitesResponse, error)
	// Добавление пользователя в друзья
	AddToFriendByUserId(ctx context.Context, in *AddToFriendByUserIdRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Принять пользователя в друзья
	AcceptFriendInvite(ctx context.Context, in *AcceptFriendInviteRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Удалить из друзей
	DeleteFromFriend(ctx context.Context, in *DeleteFromFriendRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Отклонить заявку  пользователя в друзья
	DeclineFriendInvite(ctx context.Context, in *DeclineFriendInviteRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Добавить сервер
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	// Поиск сервера
	SearchServer(ctx context.Context, in *SearchServerRequest, opts ...grpc.CallOption) (*SearchServerResponse, error)
	// Подписаться на сервер
	SubscribeServer(ctx context.Context, in *SubscribeServerRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Отписаться от сервера
	UnsubscribeServer(ctx context.Context, in *UnsubscribeServerRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Поиск сервера по пользователю
	SearchServerByUserId(ctx context.Context, in *SearchServerByUserIdRequest, opts ...grpc.CallOption) (*SearchServerByUserIdResponse, error)
	// Пригласить пользователя на сервер
	InviteUserToServer(ctx context.Context, in *InviteUserToServerRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Пригласить пользователя на сервер
	PublishMessageOnServer(ctx context.Context, in *PublishMessageOnServerRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Получить опубликованные сообщения сервера
	GetMessagesFromServer(ctx context.Context, in *GetMessagesFromServerRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	// Добавить канал
	AddChannel(ctx context.Context, in *AddChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Удалить канал
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Присоединиться к каналу
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Покинуть канал
	LeaveChannel(ctx context.Context, in *LeaveChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Отправить сообщение пользователю
	SendUserPrivateMessage(ctx context.Context, in *SendUserPrivateMessageRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Отправить сообщение пользователю
	CreatePrivateChat(ctx context.Context, in *CreatePrivateChatRequest, opts ...grpc.CallOption) (*CreatePrivateChatResponse, error)
	// Получить сообщения с пользователем
	GetUserPrivateMessages(ctx context.Context, in *GetUserPrivateMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GatewayService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GatewayService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, GatewayService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) OauthLogin(ctx context.Context, in *OauthLoginRequest, opts ...grpc.CallOption) (*OauthLoginResponse, error) {
	out := new(OauthLoginResponse)
	err := c.cc.Invoke(ctx, GatewayService_OauthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) OauthLoginCallback(ctx context.Context, in *OauthLoginCallbackRequest, opts ...grpc.CallOption) (*OauthLoginCallbackResponse, error) {
	out := new(OauthLoginCallbackResponse)
	err := c.cc.Invoke(ctx, GatewayService_OauthLoginCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, GatewayService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserByLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error) {
	out := new(GetUserFriendsResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserInvites(ctx context.Context, in *GetUserInvitesRequest, opts ...grpc.CallOption) (*GetUserInvitesResponse, error) {
	out := new(GetUserInvitesResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddToFriendByUserId(ctx context.Context, in *AddToFriendByUserIdRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddToFriendByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AcceptFriendInvite(ctx context.Context, in *AcceptFriendInviteRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_AcceptFriendInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteFromFriend(ctx context.Context, in *DeleteFromFriendRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteFromFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeclineFriendInvite(ctx context.Context, in *DeclineFriendInviteRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeclineFriendInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SearchServer(ctx context.Context, in *SearchServerRequest, opts ...grpc.CallOption) (*SearchServerResponse, error) {
	out := new(SearchServerResponse)
	err := c.cc.Invoke(ctx, GatewayService_SearchServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SubscribeServer(ctx context.Context, in *SubscribeServerRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_SubscribeServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) UnsubscribeServer(ctx context.Context, in *UnsubscribeServerRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_UnsubscribeServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SearchServerByUserId(ctx context.Context, in *SearchServerByUserIdRequest, opts ...grpc.CallOption) (*SearchServerByUserIdResponse, error) {
	out := new(SearchServerByUserIdResponse)
	err := c.cc.Invoke(ctx, GatewayService_SearchServerByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) InviteUserToServer(ctx context.Context, in *InviteUserToServerRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_InviteUserToServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) PublishMessageOnServer(ctx context.Context, in *PublishMessageOnServerRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_PublishMessageOnServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetMessagesFromServer(ctx context.Context, in *GetMessagesFromServerRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetMessagesFromServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) AddChannel(ctx context.Context, in *AddChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_AddChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_JoinChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) LeaveChannel(ctx context.Context, in *LeaveChannelRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_LeaveChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SendUserPrivateMessage(ctx context.Context, in *SendUserPrivateMessageRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, GatewayService_SendUserPrivateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CreatePrivateChat(ctx context.Context, in *CreatePrivateChatRequest, opts ...grpc.CallOption) (*CreatePrivateChatResponse, error) {
	out := new(CreatePrivateChatResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreatePrivateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetUserPrivateMessages(ctx context.Context, in *GetUserPrivateMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetUserPrivateMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	// Регистрация пользователя
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Аутентификация пользователя
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Обновление токена пользователя
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Аутентификация пользователя через OAuth
	OauthLogin(context.Context, *OauthLoginRequest) (*OauthLoginResponse, error)
	// Аутентификация пользователя через код oauth
	OauthLoginCallback(context.Context, *OauthLoginCallbackRequest) (*OauthLoginCallbackResponse, error)
	// Обновление пользователя
	UpdateUser(context.Context, *UpdateUserRequest) (*UserDataResponse, error)
	// Поиск пользователя по логину
	GetUserByLogin(context.Context, *GetUserByLoginRequest) (*UserDataResponse, error)
	// Получить список друзей пользователя
	GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error)
	// Получить список заявок в друзья пользователя
	GetUserInvites(context.Context, *GetUserInvitesRequest) (*GetUserInvitesResponse, error)
	// Добавление пользователя в друзья
	AddToFriendByUserId(context.Context, *AddToFriendByUserIdRequest) (*ActionResponse, error)
	// Принять пользователя в друзья
	AcceptFriendInvite(context.Context, *AcceptFriendInviteRequest) (*ActionResponse, error)
	// Удалить из друзей
	DeleteFromFriend(context.Context, *DeleteFromFriendRequest) (*ActionResponse, error)
	// Отклонить заявку  пользователя в друзья
	DeclineFriendInvite(context.Context, *DeclineFriendInviteRequest) (*ActionResponse, error)
	// Добавить сервер
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	// Поиск сервера
	SearchServer(context.Context, *SearchServerRequest) (*SearchServerResponse, error)
	// Подписаться на сервер
	SubscribeServer(context.Context, *SubscribeServerRequest) (*ActionResponse, error)
	// Отписаться от сервера
	UnsubscribeServer(context.Context, *UnsubscribeServerRequest) (*ActionResponse, error)
	// Поиск сервера по пользователю
	SearchServerByUserId(context.Context, *SearchServerByUserIdRequest) (*SearchServerByUserIdResponse, error)
	// Пригласить пользователя на сервер
	InviteUserToServer(context.Context, *InviteUserToServerRequest) (*ActionResponse, error)
	// Пригласить пользователя на сервер
	PublishMessageOnServer(context.Context, *PublishMessageOnServerRequest) (*ActionResponse, error)
	// Получить опубликованные сообщения сервера
	GetMessagesFromServer(context.Context, *GetMessagesFromServerRequest) (*GetMessagesResponse, error)
	// Добавить канал
	AddChannel(context.Context, *AddChannelRequest) (*ActionResponse, error)
	// Удалить канал
	DeleteChannel(context.Context, *DeleteChannelRequest) (*ActionResponse, error)
	// Присоединиться к каналу
	JoinChannel(context.Context, *JoinChannelRequest) (*ActionResponse, error)
	// Покинуть канал
	LeaveChannel(context.Context, *LeaveChannelRequest) (*ActionResponse, error)
	// Отправить сообщение пользователю
	SendUserPrivateMessage(context.Context, *SendUserPrivateMessageRequest) (*ActionResponse, error)
	// Отправить сообщение пользователю
	CreatePrivateChat(context.Context, *CreatePrivateChatRequest) (*CreatePrivateChatResponse, error)
	// Получить сообщения с пользователем
	GetUserPrivateMessages(context.Context, *GetUserPrivateMessagesRequest) (*GetMessagesResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGatewayServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGatewayServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedGatewayServiceServer) OauthLogin(context.Context, *OauthLoginRequest) (*OauthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLogin not implemented")
}
func (UnimplementedGatewayServiceServer) OauthLoginCallback(context.Context, *OauthLoginCallbackRequest) (*OauthLoginCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthLoginCallback not implemented")
}
func (UnimplementedGatewayServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserByLogin(context.Context, *GetUserByLoginRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByLogin not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriends not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserInvites(context.Context, *GetUserInvitesRequest) (*GetUserInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvites not implemented")
}
func (UnimplementedGatewayServiceServer) AddToFriendByUserId(context.Context, *AddToFriendByUserIdRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFriendByUserId not implemented")
}
func (UnimplementedGatewayServiceServer) AcceptFriendInvite(context.Context, *AcceptFriendInviteRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendInvite not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteFromFriend(context.Context, *DeleteFromFriendRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromFriend not implemented")
}
func (UnimplementedGatewayServiceServer) DeclineFriendInvite(context.Context, *DeclineFriendInviteRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFriendInvite not implemented")
}
func (UnimplementedGatewayServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedGatewayServiceServer) SearchServer(context.Context, *SearchServerRequest) (*SearchServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServer not implemented")
}
func (UnimplementedGatewayServiceServer) SubscribeServer(context.Context, *SubscribeServerRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeServer not implemented")
}
func (UnimplementedGatewayServiceServer) UnsubscribeServer(context.Context, *UnsubscribeServerRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeServer not implemented")
}
func (UnimplementedGatewayServiceServer) SearchServerByUserId(context.Context, *SearchServerByUserIdRequest) (*SearchServerByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchServerByUserId not implemented")
}
func (UnimplementedGatewayServiceServer) InviteUserToServer(context.Context, *InviteUserToServerRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserToServer not implemented")
}
func (UnimplementedGatewayServiceServer) PublishMessageOnServer(context.Context, *PublishMessageOnServerRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessageOnServer not implemented")
}
func (UnimplementedGatewayServiceServer) GetMessagesFromServer(context.Context, *GetMessagesFromServerRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesFromServer not implemented")
}
func (UnimplementedGatewayServiceServer) AddChannel(context.Context, *AddChannelRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannel not implemented")
}
func (UnimplementedGatewayServiceServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedGatewayServiceServer) JoinChannel(context.Context, *JoinChannelRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedGatewayServiceServer) LeaveChannel(context.Context, *LeaveChannelRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChannel not implemented")
}
func (UnimplementedGatewayServiceServer) SendUserPrivateMessage(context.Context, *SendUserPrivateMessageRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserPrivateMessage not implemented")
}
func (UnimplementedGatewayServiceServer) CreatePrivateChat(context.Context, *CreatePrivateChatRequest) (*CreatePrivateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateChat not implemented")
}
func (UnimplementedGatewayServiceServer) GetUserPrivateMessages(context.Context, *GetUserPrivateMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivateMessages not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_OauthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).OauthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_OauthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).OauthLogin(ctx, req.(*OauthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_OauthLoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthLoginCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).OauthLoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_OauthLoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).OauthLoginCallback(ctx, req.(*OauthLoginCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserByLogin(ctx, req.(*GetUserByLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserFriends(ctx, req.(*GetUserFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserInvites(ctx, req.(*GetUserInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddToFriendByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToFriendByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddToFriendByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddToFriendByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddToFriendByUserId(ctx, req.(*AddToFriendByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AcceptFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AcceptFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AcceptFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AcceptFriendInvite(ctx, req.(*AcceptFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteFromFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteFromFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteFromFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteFromFriend(ctx, req.(*DeleteFromFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeclineFriendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineFriendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeclineFriendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeclineFriendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeclineFriendInvite(ctx, req.(*DeclineFriendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SearchServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SearchServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SearchServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SearchServer(ctx, req.(*SearchServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SubscribeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SubscribeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SubscribeServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SubscribeServer(ctx, req.(*SubscribeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_UnsubscribeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UnsubscribeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_UnsubscribeServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UnsubscribeServer(ctx, req.(*UnsubscribeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SearchServerByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchServerByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SearchServerByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SearchServerByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SearchServerByUserId(ctx, req.(*SearchServerByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_InviteUserToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).InviteUserToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_InviteUserToServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).InviteUserToServer(ctx, req.(*InviteUserToServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_PublishMessageOnServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageOnServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).PublishMessageOnServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_PublishMessageOnServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).PublishMessageOnServer(ctx, req.(*PublishMessageOnServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetMessagesFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesFromServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetMessagesFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetMessagesFromServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetMessagesFromServer(ctx, req.(*GetMessagesFromServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_AddChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).AddChannel(ctx, req.(*AddChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_JoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_LeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).LeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_LeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).LeaveChannel(ctx, req.(*LeaveChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SendUserPrivateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserPrivateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SendUserPrivateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_SendUserPrivateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SendUserPrivateMessage(ctx, req.(*SendUserPrivateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CreatePrivateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreatePrivateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreatePrivateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreatePrivateChat(ctx, req.(*CreatePrivateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetUserPrivateMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivateMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetUserPrivateMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetUserPrivateMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetUserPrivateMessages(ctx, req.(*GetUserPrivateMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Nixonxp.discord.gateway.api.v1.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _GatewayService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GatewayService_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _GatewayService_Refresh_Handler,
		},
		{
			MethodName: "OauthLogin",
			Handler:    _GatewayService_OauthLogin_Handler,
		},
		{
			MethodName: "OauthLoginCallback",
			Handler:    _GatewayService_OauthLoginCallback_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _GatewayService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserByLogin",
			Handler:    _GatewayService_GetUserByLogin_Handler,
		},
		{
			MethodName: "GetUserFriends",
			Handler:    _GatewayService_GetUserFriends_Handler,
		},
		{
			MethodName: "GetUserInvites",
			Handler:    _GatewayService_GetUserInvites_Handler,
		},
		{
			MethodName: "AddToFriendByUserId",
			Handler:    _GatewayService_AddToFriendByUserId_Handler,
		},
		{
			MethodName: "AcceptFriendInvite",
			Handler:    _GatewayService_AcceptFriendInvite_Handler,
		},
		{
			MethodName: "DeleteFromFriend",
			Handler:    _GatewayService_DeleteFromFriend_Handler,
		},
		{
			MethodName: "DeclineFriendInvite",
			Handler:    _GatewayService_DeclineFriendInvite_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _GatewayService_CreateServer_Handler,
		},
		{
			MethodName: "SearchServer",
			Handler:    _GatewayService_SearchServer_Handler,
		},
		{
			MethodName: "SubscribeServer",
			Handler:    _GatewayService_SubscribeServer_Handler,
		},
		{
			MethodName: "UnsubscribeServer",
			Handler:    _GatewayService_UnsubscribeServer_Handler,
		},
		{
			MethodName: "SearchServerByUserId",
			Handler:    _GatewayService_SearchServerByUserId_Handler,
		},
		{
			MethodName: "InviteUserToServer",
			Handler:    _GatewayService_InviteUserToServer_Handler,
		},
		{
			MethodName: "PublishMessageOnServer",
			Handler:    _GatewayService_PublishMessageOnServer_Handler,
		},
		{
			MethodName: "GetMessagesFromServer",
			Handler:    _GatewayService_GetMessagesFromServer_Handler,
		},
		{
			MethodName: "AddChannel",
			Handler:    _GatewayService_AddChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _GatewayService_DeleteChannel_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _GatewayService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _GatewayService_LeaveChannel_Handler,
		},
		{
			MethodName: "SendUserPrivateMessage",
			Handler:    _GatewayService_SendUserPrivateMessage_Handler,
		},
		{
			MethodName: "CreatePrivateChat",
			Handler:    _GatewayService_CreatePrivateChat_Handler,
		},
		{
			MethodName: "GetUserPrivateMessages",
			Handler:    _GatewayService_GetUserPrivateMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}
