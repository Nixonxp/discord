version: "3.7"

services:
  gateway:
    build:
      context: ./gateway
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      APP_PORT: ":8080"
      SWAGGER_PORT: ":8081"
      METRICS_PORT: ":8082"
      AUTH_SERVICE_PORT: "auth:8080"
      USER_SERVICE_PORT: "user:8080"
      SERVER_SERVICE_PORT: "server:8080"
      CHANNEL_SERVICE_PORT: "channel:8080"
      CHAT_SERVICE_PORT: "chat:8080"
      AUTH_SECRET_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9" # in prod to secret
    ports:
      - "8800:8080"
      - "8801:8081"
      - "8804:8084"
      - "8084:8084"
    networks:
      - tracing
      - user
      - auth
      - server
      - channel
      - chat
      - prometheus

  auth:
    build:
      context: ./auth
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      APP_PORT: ":8080"
      METRICS_PORT: ":8082"
      USER_SERVICE_PORT: "user:8080"
      AUTH_SECRET_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9" # in prod to secret
      AUTH_REFRESH_SECRET_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9Refresh" # in prod to secret
      OAUTH_CLIENT_ID: "{key}" # in prod to secret
      OAUTH_CLIENT_SECRET: "{secret}" # in prod to secret
      OAUTH_REDIRECT_URL: "{url}" # in prod to secret
    networks:
      - tracing
      - user
      - prometheus

  user:
    build:
      context: ./user
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      APP_PORT: ":8080"
      POSTGRES_DSN: "user=admin password=password123 host=postgres port=5432 dbname=discord sslmode=require pool_max_conns=10"
    depends_on:
      - postgres
    networks:
      - tracing
      - postgresql
      - prometheus

  server:
    build:
      context: ./server
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      MONGO_DB: "discord"
      MONGO_HOST: "mongodb"
      MONGO_PORT: 27017
      MONGO_USER: "discord"
      MONGO_PASSWORD: "example"
      APP_PORT: ":8080"
      CHAT_SERVICE_PORT: "chat:8080"
    networks:
      - mongodb
      - tracing
      - prometheus

  channel:
    build:
      context: ./channel
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      MONGO_DB: "discord"
      MONGO_HOST: "mongodb"
      MONGO_PORT: 27017
      MONGO_USER: "discord"
      MONGO_PASSWORD: "example"
      APP_PORT: ":8080"
    networks:
      - mongodb
      - tracing
      - prometheus

  chat:
    build:
      context: ./chat
      dockerfile: ./build/Dockerfile
    environment:
      JAEGER_HOST: "jaeger:6831"
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      MONGO_DB: "discord"
      MONGO_HOST: "mongodb"
      MONGO_PORT: 27017
      MONGO_USER: "discord"
      MONGO_PASSWORD: "example"
      APP_PORT: ":8080"
      KAFKA_ADDRESS: "kafka:9092"
    networks:
      - mongodb
      - tracing
      - prometheus
      - kafka-network

  mongodb:
    image: mongo:7.0.5
    restart: unless-stopped
    volumes:
      - mongo-volume:/data/db1
    ports:
      - 27117:27017
    environment:
      - PUID=1000
      - PGID=1000
      - MONGO_INITDB_ROOT_USERNAME=discord
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=discord
    networks:
      - mongodb

  postgres:
    container_name: postgres_discord
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "discord"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password123"
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - postgresql

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp" # jaeger-client
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # web
      - "14268:14268"
      - "9411:9411"
    networks:
      - tracing
  prometheus:
    image: prom/prometheus:v2.37.9
    container_name: prometheus
    hostname: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - ./docker/prometheus:/prometheus
    networks:
      - prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana-oss:10.0.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/var/lib/grafana
    networks:
      - prometheus

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - kafka-network
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 #for local localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - kafka-network
    ports:
      - "9092:9092"

volumes:
  postgres:
  mongo-volume:
  cache:
    driver: local

networks:
  tracing:
    driver: bridge
  postgresql:
    driver: bridge
  user:
    driver: bridge
  auth:
    driver: bridge
  server:
    driver: bridge
  channel:
    driver: bridge
  chat:
    driver: bridge
  mongodb:
    driver: bridge
  prometheus:
    driver: bridge
  gateway:
    driver: bridge
  kafka-network:
    driver: bridge