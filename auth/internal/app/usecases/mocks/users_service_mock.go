// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/auth/internal/app/models"
	mock "github.com/stretchr/testify/mock"

	usecases "github.com/Nixonxp/discord/auth/internal/app/usecases"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// CreateOrCreateUser provides a mock function with given fields: ctx, userInfo
func (_m *UserServiceInterface) CreateOrCreateUser(ctx context.Context, userInfo usecases.GetOrCreateUserRequest) (*models.User, error) {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrCreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.GetOrCreateUserRequest) (*models.User, error)); ok {
		return rf(ctx, userInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.GetOrCreateUserRequest) *models.User); ok {
		r0 = rf(ctx, userInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.GetOrCreateUserRequest) error); ok {
		r1 = rf(ctx, userInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserForLogin provides a mock function with given fields: ctx, loginInfo
func (_m *UserServiceInterface) GetUserForLogin(ctx context.Context, loginInfo usecases.LoginUserInfo) (*models.User, error) {
	ret := _m.Called(ctx, loginInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetUserForLogin")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.LoginUserInfo) (*models.User, error)); ok {
		return rf(ctx, loginInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.LoginUserInfo) *models.User); ok {
		r0 = rf(ctx, loginInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.LoginUserInfo) error); ok {
		r1 = rf(ctx, loginInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, registerInfo
func (_m *UserServiceInterface) Register(ctx context.Context, registerInfo usecases.RegisterUserInfo) (*models.User, error) {
	ret := _m.Called(ctx, registerInfo)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.RegisterUserInfo) (*models.User, error)); ok {
		return rf(ctx, registerInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.RegisterUserInfo) *models.User); ok {
		r0 = rf(ctx, registerInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.RegisterUserInfo) error); ok {
		r1 = rf(ctx, registerInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
