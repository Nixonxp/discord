// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	usecases "github.com/Nixonxp/discord/auth/internal/app/usecases"
	mock "github.com/stretchr/testify/mock"
)

// OAuthServiceInterface is an autogenerated mock type for the OAuthServiceInterface type
type OAuthServiceInterface struct {
	mock.Mock
}

// AuthCodeURL provides a mock function with given fields: state
func (_m *OAuthServiceInterface) AuthCodeURL(state string) string {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExchangeClient provides a mock function with given fields: ctx, code
func (_m *OAuthServiceInterface) ExchangeClient(ctx context.Context, code string) (*usecases.UserInfo, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeClient")
	}

	var r0 *usecases.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*usecases.UserInfo, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *usecases.UserInfo); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecases.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOAuthServiceInterface creates a new instance of OAuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthServiceInterface {
	mock := &OAuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
