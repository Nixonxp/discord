// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Nixonxp/discord/server/internal/app/models"
	mock "github.com/stretchr/testify/mock"

	usecases "github.com/Nixonxp/discord/server/internal/app/usecases"
)

// ServiceChatInterface is an autogenerated mock type for the ServiceChatInterface type
type ServiceChatInterface struct {
	mock.Mock
}

// GetServerMessages provides a mock function with given fields: ctx, msg
func (_m *ServiceChatInterface) GetServerMessages(ctx context.Context, msg usecases.GetMessagesFromServerRequest) (*models.GetMessagesInfo, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for GetServerMessages")
	}

	var r0 *models.GetMessagesInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.GetMessagesFromServerRequest) (*models.GetMessagesInfo, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.GetMessagesFromServerRequest) *models.GetMessagesInfo); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetMessagesInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.GetMessagesFromServerRequest) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendServerMessage provides a mock function with given fields: ctx, msg
func (_m *ServiceChatInterface) SendServerMessage(ctx context.Context, msg usecases.PublishMessageOnServerRequest) (*models.ActionInfo, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendServerMessage")
	}

	var r0 *models.ActionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecases.PublishMessageOnServerRequest) (*models.ActionInfo, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecases.PublishMessageOnServerRequest) *models.ActionInfo); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ActionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecases.PublishMessageOnServerRequest) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceChatInterface creates a new instance of ServiceChatInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceChatInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceChatInterface {
	mock := &ServiceChatInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
